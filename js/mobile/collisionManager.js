var CollisionManager=function(e){this.game=e,this.spacecraft=e.spacecraft,this.meteors=e.meteors,this.enemies=e.enemies,this.collisionDelayTimer=0};CollisionManager.prototype.checkAndResolve=function(e){this.collisionDelayTimer+=e,this.collisionDelayTimer>10&&(this.checkMeteorsWithMeteors(),this.checkSpacecraftWithMeteors(),this.checkSpacecraftWithEnemies(),this.checkSpacecraftBulletsWithMeteorsEnemies(),this.checkEnemyBulletsWithSpacecraft(),this.collisionDelayTimer=0),this.checkSpacecraftWithWalls()},CollisionManager.prototype.checkMeteorsWithMeteors=function(){if(!(this.meteors.length<2))for(var e=0;e<this.meteors.length-1;e++)for(var t=e+1;t<this.meteors.length;t++)this.meteors[e].isOnFire()||this.meteors[t].isOnFire()||this.circleCircleCollision(this.meteors[e],this.meteors[t])&&(this.resolveElasticCollision(this.meteors[e],this.meteors[t]),this.meteors[e].updateRotation(this.meteors[t].xCentre),this.meteors[t].updateRotation(this.meteors[e].xCentre))},CollisionManager.prototype.checkSpacecraftWithWalls=function(){this.spacecraft.xPosition<5&&(this.spacecraft.xVelocity=0,this.spacecraft.isLeftWall=!0,this.spacecraft.xPosition=5),this.spacecraft.xPosition+this.spacecraft.width+5>this.game.canvas.width&&(this.spacecraft.xVelocity=0,this.spacecraft.isRightWall=!0,this.spacecraft.xPosition=this.game.canvas.width-this.spacecraft.width-5),this.spacecraft.yPosition<5&&(this.spacecraft.yVelocity=0,this.spacecraft.isUpWall=!0,this.spacecraft.yPosition=5),this.spacecraft.yPosition+this.spacecraft.height+5>this.game.canvas.height&&(this.spacecraft.yVelocity=0,this.spacecraft.isDownWall=!0,this.spacecraft.yPosition=this.game.canvas.height-this.spacecraft.height-5)},CollisionManager.prototype.checkSpacecraftWithEnemies=function(){for(var e=0;e<this.enemies.length;e++)!this.enemies[e].isOnFire()&&this.rectRectCollision(this.spacecraft,this.enemies[e])&&this.circleRectCollision(this.spacecraft,this.enemies[e])&&(this.resolveElasticCollision(this.spacecraft,this.enemies[e]),this.enemies[e].explode(),this.spacecraft.isShieldUp?this.spacecraft.score+=10:this.spacecraft.livesRemaining--)},CollisionManager.prototype.rectRectCollision=function(e,t){return e.xPosition<t.xPosition+t.width&&e.xPosition+e.width>t.xPosition&&e.yPosition<t.yPosition+t.height&&e.height+e.yPosition>t.yPosition},CollisionManager.prototype.circleCircleCollision=function(e,t){var i=e.xCentre-t.xCentre,s=e.yCentre-t.yCentre,c=Math.sqrt(i*i+s*s);return e.radius+t.radius>c},CollisionManager.prototype.circleRectCollision=function(e,t){var i=Math.abs(e.xCentre-t.xPosition-t.width/2),s=Math.abs(e.yCentre-t.yPosition-t.height/2);if(i>t.width/2+e.radius)return!1;if(s>t.height/2+e.radius)return!1;if(i<=t.width/2)return!0;if(s<=t.height/2)return!0;var c=i-t.width/2,o=s-t.height/2;return c*c+o*o<=e.radius*e.radius},CollisionManager.prototype.checkSpacecraftWithMeteors=function(){for(var e=0;e<this.meteors.length;e++)!this.meteors[e].isOnFire()&&this.circleCircleCollision(this.spacecraft,this.meteors[e])&&this.circleRectCollision(this.meteors[e],this.spacecraft)&&(this.resolveElasticCollision(this.spacecraft,this.meteors[e]),this.meteors[e].explode(),this.spacecraft.isShieldUp?this.spacecraft.score+=5:this.spacecraft.livesRemaining--)},CollisionManager.prototype.checkSpacecraftBulletsWithMeteorsEnemies=function(){for(var e=0;e<this.spacecraft.bullets.length;e++)if(!this.spacecraft.bullets[e].isOnFire()){for(var t=0;t<this.meteors.length;t++)this.meteors[t].isOnFire()||this.circleRectCollision(this.meteors[t],this.spacecraft.bullets[e])&&(this.meteors[t].explode(),this.spacecraft.bullets[e].explode(),this.spacecraft.score+=5);for(var i=0;i<this.enemies.length;i++)this.enemies[i].isOnFire()||this.rectRectCollision(this.enemies[i],this.spacecraft.bullets[e])&&(this.enemies[i].explode(),this.spacecraft.bullets[e].explode(),this.spacecraft.score+=10)}},CollisionManager.prototype.checkEnemyBulletsWithSpacecraft=function(){for(var e=0;e<this.enemies.length;e++)if("enemyBlue"!==this.enemies[e].type&&"enemyRed"!==this.enemies[e].type)for(var t=0;t<this.enemies[e].bullets.length;t++)this.enemies[e].bullets[t].isOnFire()||this.rectRectCollision(this.spacecraft,this.enemies[e].bullets[t])&&this.circleRectCollision(this.spacecraft,this.enemies[e].bullets[t])&&(this.enemies[e].bullets[t].explode(),this.spacecraft.isShieldUp||this.spacecraft.livesRemaining--)},CollisionManager.prototype.resolveElasticCollision=function(){};